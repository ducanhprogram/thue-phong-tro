// src/services/authService.js
import { post, get } from "@/utils/httpRequest";

// ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
export const register = async (name, email, password) => {
    try {
        console.log("üöÄ API Base URL:", import.meta.env.VITE_API_URL);
        const response = await post("/auth/register", {
            name,
            email,
            password,
        });
        console.log("Register response:", response);
        return response;
    } catch (error) {
        console.error("Register error:", error);
        throw error;
    }
};

// ƒêƒÉng nh·∫≠p
export const login = async (email, password) => {
    try {
        const response = await post("/auth/login", {
            email,
            password,
        });
        // L∆∞u token v√†o localStorage
        // if (response.accessToken && response.refreshToken) {
        //     localStorage.setItem("accessToken", response.accessToken);
        //     localStorage.setItem("refreshToken", response.refreshToken);
        // }
        if (response.data?.accessToken && response.data?.refreshToken) {
            localStorage.setItem("accessToken", response.data.accessToken);
            localStorage.setItem("refreshToken", response.data.refreshToken);
        }
        return response;
    } catch (error) {
        const errorMessage =
            error.response?.data?.message || error.response?.data?.error || error.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i";

        throw new Error(errorMessage);
    }
};

// X√°c th·ª±c email
export const verifyEmail = async (token) => {
    try {
        const response = await post(`/auth/verify-email/${token}`);
        return response;
    } catch (error) {
        throw new Error(error.message || "X√°c th·ª±c email th·∫•t b·∫°i");
    }
};

// L√†m m·ªõi token
export const refreshToken = async () => {
    try {
        const refreshToken = localStorage.getItem("refreshToken");
        if (!refreshToken) {
            throw new Error("Kh√¥ng t√¨m th·∫•y refresh token");
        }
        const response = await post("/auth/refresh-token", {
            refreshToken: refreshToken,
        });
        // C·∫≠p nh·∫≠t token m·ªõi v√†o localStorage
        if (response.accessToken && response.refreshToken) {
            localStorage.setItem("accessToken", response.accessToken);
            localStorage.setItem("refreshToken", response.refreshToken);
        }
        return response;
    } catch (error) {
        throw new Error(error.message || "L√†m m·ªõi token th·∫•t b·∫°i");
    }
};

// ƒêƒÉng xu·∫•t
export const logout = async () => {
    try {
        const refreshToken = localStorage.getItem("refreshToken");
        const response = await post("/auth/logout", {
            refreshToken: refreshToken,
        });
        // X√≥a token kh·ªèi localStorage
        localStorage.removeItem("accessToken");
        localStorage.removeItem("refreshToken");
        localStorage.removeItem("persist:auth");
        return response;
    } catch (error) {
        throw new Error(error.message || "ƒêƒÉng xu·∫•t th·∫•t b·∫°i");
    }
};

// ƒêƒÉng xu·∫•t kh·ªèi t·∫•t c·∫£ thi·∫øt b·ªã
export const logoutAll = async () => {
    try {
        const response = await post("/auth/logout-all");
        // X√≥a token kh·ªèi localStorage
        localStorage.removeItem("accessToken");
        localStorage.removeItem("refreshToken");
        return response;
    } catch (error) {
        throw new Error(error.message || "ƒêƒÉng xu·∫•t t·∫•t c·∫£ thi·∫øt b·ªã th·∫•t b·∫°i");
    }
};

// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
export const getMe = async () => {
    try {
        const response = await get("/auth/me");
        return response;
    } catch (error) {
        throw new Error(error.message || "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th·∫•t b·∫°i");
    }
};

// G·ª≠i l·∫°i email x√°c th·ª±c
export const resendVerifyEmail = async (email) => {
    try {
        const response = await post("/auth/resend-verify-email", { email });
        return response;
    } catch (error) {
        throw new Error(error.message || "G·ª≠i l·∫°i email x√°c th·ª±c th·∫•t b·∫°i");
    }
};

// Qu√™n m·∫≠t kh·∫©u
export const forgotPassword = async (email) => {
    try {
        const response = await post("/auth/forgot-password", { email });
        return response;
    } catch (error) {
        const errorMessage =
            error.response?.data?.message || error.response?.data?.error || error.message || "G·ª≠i email th·∫•t b·∫°i";
        throw new Error(errorMessage);
    }
};

// ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
export const resetPassword = async (token, password) => {
    try {
        const response = await post(`/auth/reset-password/${token}`, { password });
        return response;
    } catch (error) {
        throw new Error(error.message || "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i");
    }
};

// ƒê·ªïi m·∫≠t kh·∫©u
export const changePassword = async (current_password, new_password) => {
    try {
        const response = await post("/auth/change-password", {
            current_password,
            new_password,
        });
        return response;
    } catch (error) {
        throw new Error(error.message || "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i");
    }
};
